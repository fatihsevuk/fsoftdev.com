I"Õ;<h2 id="literallerindeÄŸiÅŸmezler-yazÄ±mÄ±">Literalâ€™lerin(DeÄŸiÅŸmezler) YazÄ±mÄ±</h2>

<p>Kodun iÃ§inde gÃ¶rdÃ¼ÄŸÃ¼mÃ¼z sayÄ±sal ifadelere <code class="highlighter-rouge">literal</code> denir. SayÄ±sal deÄŸerleri illa decimal(10) tabanda yazmamÄ±za gerek yoktur. Binary(2), octal(8) veya hexadecimal(16) tabanda da yazabiliriz.</p>

<p>Bir sayÄ± eÄŸer</p>

<ul>
  <li>Sadece 0 ve 1 deÄŸerlerinden oluÅŸmuÅŸsa ve 0b veya 0B Ã¶n eki ile baÅŸlÄ±yorsa o sayÄ± binary(2 lik) tabandadÄ±r.</li>
  <li>Sadece 0-9 aralÄ±ÄŸÄ±nda numeric deÄŸer ve A ile F arasÄ±nda harf deÄŸerinden oluÅŸuyorsa ve 0X ile baÅŸlÄ±yorsa hexadecimal(16 lÄ±k) tabandadÄ±r.</li>
  <li>Sadece 0-7 aralÄ±ÄŸÄ±nda numeric deÄŸer alabiliyorsa octal(8 lik) tabandadÄ±r.</li>
</ul>

<p>SayÄ±sal deÄŸerleri okunabilirlik aÃ§Ä±sÄ±ndan basmaklarÄ± arasÄ±na <code class="highlighter-rouge">_</code> koyarak ifade edebiliriz. <code class="highlighter-rouge">1_234_345_234</code> gibi. YalnÄ±zca baÅŸa,sona ve ondalÄ±k deÄŸerin baÅŸÄ±na ve sonuna konulmaz.</p>

<h2 id="javada-referans-tipleri">Javaâ€™da Referans Tipleri</h2>

<p>OluÅŸturduÄŸumuz nesnelerin hafÄ±zadaki adreslerini tutan deÄŸerlere <code class="highlighter-rouge">o nesnenin referansÄ±</code> denir. C dilinde verilerin hafÄ±zadaki fiziksel adreslerini bilebiliyorduk fakat Java buna izin vermez. AynÄ± tipteki nesneler arasÄ±nda referans atamsÄ± olabilir. new anahtar kelimesi ile yeni oluÅŸturulan nesnelere atanabilir.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">text</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello from Mr Robot"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Kod Ã¶rneÄŸimizde <code class="highlighter-rouge">text</code> ifadesi yeni oluÅŸturulan String nesnesinin referansÄ±dÄ±r.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">text</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello from Mr Robot"</span><span class="o">);</span>
<span class="n">text</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Good Bye from Mr Robot"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="highlighter-rouge">text</code> referansÄ±na aynÄ± tÃ¼rden oluÅŸturduÄŸumuz baÅŸka bir nesnenin fiziksel adresini baÄŸladÄ±k.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nc">String</span> <span class="n">hello</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello from Mr Robot"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">goodBye</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Good Bye from Mr Robot"</span><span class="o">);</span>
<span class="n">hello</span><span class="o">=</span><span class="n">goodBye</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Burada da <code class="highlighter-rouge">hello</code> referansÄ±na <code class="highlighter-rouge">goodBye</code> referansÄ±nÄ± atadÄ±k yani artÄ±k her iki referansta <code class="highlighter-rouge">new String("Good Bye from Mr Robot");</code> ifadesi ile oluÅŸan nesneyi refere eder.</p>

<p>Primitiv tÃ¼rlerin aksine referans deÄŸerlere <code class="highlighter-rouge">null</code> deÄŸeri vererek hafÄ±zadaki iÅŸaret ettiÄŸi nesne ile baÄŸÄ±nÄ± keseriz ve bu ilgili nesne artÄ±k Garbage Collectorâ€™Ä±n ilgi sahasÄ±na girer.</p>

<p>Referans tÃ¼rler vasÄ±tasÄ±yla refere ettikleri nesnenin Ã¼yelerine eriÅŸebiliriz. Fakat primit tÃ¼rlerde bÃ¶yle bir durum sÃ¶z konusu deÄŸildir.</p>

<h2 id="java-variables-deÄŸiÅŸkenler">Java Variables (DeÄŸiÅŸkenler)</h2>
<p>TÃ¼m diler de olduÄŸu gibi Java dilinde de hafÄ±zada veri saklamak iÃ§in deÄŸiÅŸkenler kullanÄ±lÄ±r. AÅŸaÄŸÄ±da String, int ve long tÃ¼rÃ¼nde 3 farklÄ± deÄŸiÅŸken tanÄ±mÄ± vardÄ±r.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>
<span class="nc">String</span> <span class="n">sValue</span><span class="o">=</span><span class="s">"I am a String value"</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">iValue</span><span class="o">=</span><span class="mi">21</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">lValue</span><span class="o">=</span><span class="mi">232L</span><span class="o">;</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>YukarÄ±daki kodda <code class="highlighter-rouge">sValue</code>,<code class="highlighter-rouge">iValue</code> ve <code class="highlighter-rouge">lValue</code> bizim deÄŸiÅŸkenlerimizdir ve <code class="highlighter-rouge">sahip olduklarÄ± veri tipinin kapasitesi miktarÄ±nca</code> hafÄ±zada alana sahiptirler.</p>

<h2 id="naming-conversion">Naming Conversion</h2>
<p>Javaâ€™da sÄ±nÄ±flara deÄŸiÅŸkenlere metotlar vs. isim verirken ÅŸunlara dikkat etmemiz gerekir.</p>

<ul>
  <li>Bir harf yada <code class="highlighter-rouge">$</code> veya <code class="highlighter-rouge">_</code> (Java 9 dan beri _ ye izin yok.) ile baÅŸlayabilir.</li>
  <li>SayÄ± ile baÅŸlayamaz fakat bitebilir.</li>
  <li>Java keywordlerden biriyle aynÄ± isme sahip olamaz.</li>
  <li>goto ve const Javaâ€™da olamamasÄ±na raÄŸmen reserved word olarak Java tarafÄ±ndan ayrÄ±lmÄ±ÅŸtÄ±r.</li>
  <li>true,false ve null reserved deÄŸil literaldir bu yÃ¼zden kullanÄ±lmazlar.</li>
</ul>

<p>Javaâ€™da isimlendirme yaparken aÅŸaÄŸÄ±daki stillerden birini kullanabiliriz.</p>

<ul>
  <li>Camel Case
    <ul>
      <li>myVariableName</li>
    </ul>
  </li>
  <li>Snake Case
    <ul>
      <li>my_variable_name</li>
    </ul>
  </li>
  <li>Kebab Case
    <ul>
      <li>my-variable-name</li>
    </ul>
  </li>
  <li>Pascal Case
    <ul>
      <li>MyVariableName</li>
    </ul>
  </li>
</ul>

<p>Javaâ€™da ayniÃ§erisindeÃ§erisnde birden Ã§ok deÄŸiÅŸken tanÄ±lanabilir ve deÄŸer atamasÄ± yapÄ±labilir tabi ki deÄŸiÅŸkenler aynÄ± tÃ¼rde olmak koÅŸuluyla.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">weight</span><span class="o">,</span><span class="n">height</span><span class="o">,</span><span class="n">age</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">country</span><span class="o">=</span><span class="s">"Turkey"</span><span class="o">,</span><span class="n">language</span><span class="o">=</span><span class="s">"Turkish"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">city</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span> <span class="c1">// DOESNT COMPILE</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="deÄŸiÅŸkenlere-iÌ‡lk-deÄŸer-atama-initializing-variables">DeÄŸiÅŸkenlere Ä°lk DeÄŸer Atama (Initializing Variables)</h2>

<h3 id="yerellocal-deÄŸiÅŸkenler">Yerel(Local) DeÄŸiÅŸkenler</h3>
<p>Javaâ€™da bir kod bloÄŸu, constructor ya da metot iÃ§erisinde tanÄ±mlanan deÄŸiÅŸkenlerdir. DeÄŸer atamasÄ± yapÄ±lmadan kullanÄ±lamaz Ã§Ã¼nkÃ¼ default deÄŸerlere sahip deÄŸillerdir. Atama yapÄ±lmadan kullanÄ±lmalarÄ± halinde derleyici hata verir.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fire</span><span class="o">()</span> <span class="o">{</span>
<span class="kt">int</span> <span class="n">power</span><span class="o">=</span><span class="mi">100</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">bullet</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">fire</span><span class="o">=</span><span class="n">power</span><span class="o">+</span><span class="n">bullet</span><span class="o">;</span><span class="c1">// DOESNT COMPILE</span>
<span class="c1">// bullet deÄŸiÅŸkeni initialize edilmediÄŸi iÃ§in derleyici hata verir.</span>
<span class="k">return</span> <span class="n">fire</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Metotlara ve constructorlara geÃ§irilen parametreler Ã¶ncelikle initialize edilmelidir.</p>

<h3 id="class-ve-instance-deÄŸiÅŸkenleri">Class ve Instance DeÄŸiÅŸkenleri</h3>

<p>Instance deÄŸiÅŸkenleri field olarak adlandÄ±rÄ±lÄ±rlar. SÄ±nÄ±ftan Ã¼retilen her nesne bu fieldâ€™lara sahiptir fakat aynÄ± deÄŸere sahip olmayabilirler. Class deÄŸiÅŸkenlerine ise nesne oluÅŸturmadan eriÅŸmek mÃ¼mkÃ¼ndÃ¼r. Ã‡Ã¼nkÃ¼ static olarak tanÄ±mlanÄ±rlar. Bu iki deÄŸiÅŸkende default deÄŸere sahiptir ve kullanacaÄŸÄ±mÄ±z zaman ilk deÄŸer atamasÄ± yapmamÄ±za gerek yoktur.</p>

<p><strong>Defult deÄŸerler</strong></p>

<ul>
  <li>String- <code class="highlighter-rouge">null</code></li>
  <li>byte,int,long,shor - <code class="highlighter-rouge">0</code></li>
  <li>char - <code class="highlighter-rouge">'\u0000' (NULL)</code></li>
  <li>boolean - <code class="highlighter-rouge">false</code></li>
  <li>double , <code class="highlighter-rouge">float - 0.0</code></li>
</ul>

<h2 id="javada-var-kullanÄ±mÄ±">Javaâ€™da <em>var</em> KullanÄ±mÄ±</h2>

<p>Javaâ€™da var â€˜Ä±n formal ismi <code class="highlighter-rouge">Local variable interface type</code> olarak geÃ§mektedir. YalnÄ±zca local deÄŸiÅŸkenlerde kullanÄ±lÄ±r. SÄ±nÄ±f deÄŸiÅŸkenlerinde kullanÄ±mÄ± derleme hatasÄ±na sebep olur.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getNameAndAge</span><span class="o">()</span> <span class="o">{</span>
<span class="kt">var</span> <span class="n">name</span><span class="o">=</span><span class="s">"MrRobot"</span><span class="o">;</span>
<span class="kt">var</span> <span class="n">age</span><span class="o">=</span><span class="s">"20"</span>
<span class="k">return</span> <span class="n">name</span><span class="o">+</span><span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>var ile tanÄ±mlama yapÄ±lan ilk satÄ±rda derleyici atanan deÄŸerin tÃ¼tÃ¼ne bakarak deÄŸiÅŸkenin tipini belirler ve deÄŸiÅŸkene yapÄ±lacak sonraki deÄŸer atamalarÄ±nda bu tipi zorunlu tutar. FarklÄ± bir tÃ¼rde deÄŸer atamasÄ± yapÄ±lÄ±rsa derleyici hata verir. Burada JS deki var yapÄ±sÄ±ndan farkÄ± ortaya Ã§Ä±kar.</p>

<p>var ile tanÄ±mlanan deÄŸiÅŸkenin tipi sonradan deÄŸiÅŸtirilemez fakat deÄŸeri deÄŸiÅŸtirilebilir.</p>

<p><strong>Not:</strong> EÄŸer var kullanacaksak tanÄ±mladÄ±ÄŸÄ±mÄ±z satÄ±rda deÄŸer atamasÄ± yapmalÄ±yÄ±z Ã§Ã¼nkÃ¼ daha sonra deÄŸer atamasÄ± yaparsak derleyici deÄŸiÅŸken tipini bilmediÄŸi iÃ§in hat verir.</p>

<p><strong>Not:</strong> Tek satÄ±rda birden Ã§ok deÄŸiÅŸken tanÄ±mlana ifadelerde kullanÄ±lmaz.</p>

<p><strong>Not:</strong> var deÄŸiÅŸkene null atamasÄ± ilk satÄ±rda yapÄ±lmaz null atamasÄ± ilk satÄ±r harici ve pirimitive olmayan var deÄŸiÅŸkenlerde yapÄ±lÄ±r. Ã‡Ã¼nkÃ¼ pirimitivlere null atamasÄ± yapÄ±lmaz.</p>

<p><strong>Not:</strong> var isminde bir deÄŸiÅŸken tanÄ±mlayabiliriz Ã§Ã¼nkÃ¼ reserved word deÄŸildir fakat bir type yani sÄ±nÄ±f, interface ya da enum tanÄ±mlayamayÄ±z Ã§Ã¼nkÃ¼ var Javaâ€™dfa reserved typedÄ±r.</p>

<h2 id="variable-scope">Variable Scope</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">double</span> <span class="nf">calculateBMI</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>
<span class="kt">double</span> <span class="n">bmi</span><span class="o">=</span><span class="n">weight</span><span class="o">/</span><span class="n">height</span><span class="o">*</span><span class="n">height</span><span class="o">;</span>
<span class="k">return</span> <span class="n">bmi</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>YukarÄ±daki metodda bmi,height ve weight local deÄŸiÅŸkenlerdir. Ve metot scopeâ€™una shiptirler.</p>

<p>Metot iÃ§erisndeki baÅŸka kod bloklarÄ± kendi scopuna sahiptirler. Her <code class="highlighter-rouge">{...}</code> arasÄ± bir scoptur. Scopun dÄ±ÅŸÄ±ndaki bir deÄŸiÅŸkene eriÅŸmek istediÄŸimizde derleyici <code class="highlighter-rouge">Cannot find symbo</code>l hatasÄ± verir.</p>

<h2 id="class-scope">Class Scope</h2>

<p>Instance variable nesne iÃ§erisinde tanÄ±mlÄ±dÄ±r tanÄ±mlandÄ±ÄŸÄ± yerde baÅŸlar ve nesnenin yaÅŸam sÃ¼resince o da yaÅŸar. SÄ±nÄ±f deÄŸiÅŸkenleri ise tanÄ±mlandÄ±ÄŸÄ± yerde baÅŸlar ve programÄ±n yaÅŸam sÃ¼resince hayattadÄ±r.</p>

<h2 id="nesneleri-yok-etme">Nesneleri Yok Etme</h2>

<ul>
  <li>Garbage Collection Java tarafÄ±ndan otomatik yapÄ±lÄ±r.</li>
  <li>TÃ¼m Java nesneleri <code class="highlighter-rouge">heap</code> bellekte saklanÄ±r.</li>
  <li>Ã‡Ã¶p toplama programcÄ±nÄ±n kontrolunde olsa programcÄ± hafÄ±zayÄ± kontrol etmek zorundadÄ±r Ã§Ã¼nkÃ¼ eÄŸer heap dolarsa program durur. <code class="highlighter-rouge">OutOfMemory Exception. </code></li>
  <li>Ya da programcÄ± referanssÄ±z nesneleri silmezse hafÄ±zada sensitive veriler kalabilir bu da gÃ¼venlik aÃ§Ä±klarÄ±na sebep olur.</li>
  <li>Ã‡Ã¶p toplama iÃ§in birÃ§ok algoritma mevcuttur.</li>
  <li><code class="highlighter-rouge">System. gc(); </code> metodu garbage collectoru Ã§aÄŸÄ±rÄ±r fakat Ã§Ã¶p toplama iÅŸlemini garanti etmez kontrol her zaman JVM dedir.</li>
  <li>JVM OutOfMemory olmadan Ã§Ã¶p toplamayÄ± hedefler.</li>
</ul>

:ET